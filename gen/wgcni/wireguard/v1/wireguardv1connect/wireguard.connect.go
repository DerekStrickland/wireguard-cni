// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wgcni/wireguard/v1/wireguard.proto

package wireguardv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/clly/wireguard-cni/gen/wgcni/wireguard/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// WireguardServiceName is the fully-qualified name of the WireguardService service.
	WireguardServiceName = "wgcni.wireguard.v1.WireguardService"
)

// WireguardServiceClient is a client for the wgcni.wireguard.v1.WireguardService service.
type WireguardServiceClient interface {
	// Register will register a wireguard peer
	Register(context.Context, *connect_go.Request[v1.RegisterRequest]) (*connect_go.Response[v1.RegisterResponse], error)
	// Peers rpc will return a list of all wireguard peers
	Peers(context.Context, *connect_go.Request[v1.PeersRequest]) (*connect_go.Response[v1.PeersResponse], error)
}

// NewWireguardServiceClient constructs a client for the wgcni.wireguard.v1.WireguardService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWireguardServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) WireguardServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &wireguardServiceClient{
		register: connect_go.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+"/wgcni.wireguard.v1.WireguardService/Register",
			opts...,
		),
		peers: connect_go.NewClient[v1.PeersRequest, v1.PeersResponse](
			httpClient,
			baseURL+"/wgcni.wireguard.v1.WireguardService/Peers",
			opts...,
		),
	}
}

// wireguardServiceClient implements WireguardServiceClient.
type wireguardServiceClient struct {
	register *connect_go.Client[v1.RegisterRequest, v1.RegisterResponse]
	peers    *connect_go.Client[v1.PeersRequest, v1.PeersResponse]
}

// Register calls wgcni.wireguard.v1.WireguardService.Register.
func (c *wireguardServiceClient) Register(ctx context.Context, req *connect_go.Request[v1.RegisterRequest]) (*connect_go.Response[v1.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// Peers calls wgcni.wireguard.v1.WireguardService.Peers.
func (c *wireguardServiceClient) Peers(ctx context.Context, req *connect_go.Request[v1.PeersRequest]) (*connect_go.Response[v1.PeersResponse], error) {
	return c.peers.CallUnary(ctx, req)
}

// WireguardServiceHandler is an implementation of the wgcni.wireguard.v1.WireguardService service.
type WireguardServiceHandler interface {
	// Register will register a wireguard peer
	Register(context.Context, *connect_go.Request[v1.RegisterRequest]) (*connect_go.Response[v1.RegisterResponse], error)
	// Peers rpc will return a list of all wireguard peers
	Peers(context.Context, *connect_go.Request[v1.PeersRequest]) (*connect_go.Response[v1.PeersResponse], error)
}

// NewWireguardServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWireguardServiceHandler(svc WireguardServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/wgcni.wireguard.v1.WireguardService/Register", connect_go.NewUnaryHandler(
		"/wgcni.wireguard.v1.WireguardService/Register",
		svc.Register,
		opts...,
	))
	mux.Handle("/wgcni.wireguard.v1.WireguardService/Peers", connect_go.NewUnaryHandler(
		"/wgcni.wireguard.v1.WireguardService/Peers",
		svc.Peers,
		opts...,
	))
	return "/wgcni.wireguard.v1.WireguardService/", mux
}

// UnimplementedWireguardServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWireguardServiceHandler struct{}

func (UnimplementedWireguardServiceHandler) Register(context.Context, *connect_go.Request[v1.RegisterRequest]) (*connect_go.Response[v1.RegisterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wgcni.wireguard.v1.WireguardService.Register is not implemented"))
}

func (UnimplementedWireguardServiceHandler) Peers(context.Context, *connect_go.Request[v1.PeersRequest]) (*connect_go.Response[v1.PeersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wgcni.wireguard.v1.WireguardService.Peers is not implemented"))
}
