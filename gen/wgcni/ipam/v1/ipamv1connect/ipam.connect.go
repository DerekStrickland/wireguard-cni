// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wgcni/ipam/v1/ipam.proto

package ipamv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
	v1 "wireguard-cni/gen/wgcni/ipam/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// IPAMServiceName is the fully-qualified name of the IPAMService service.
	IPAMServiceName = "wgcni.ipam.v1.IPAMService"
)

// IPAMServiceClient is a client for the wgcni.ipam.v1.IPAMService service.
type IPAMServiceClient interface {
	Alloc(context.Context, *connect_go.Request[v1.AllocRequest]) (*connect_go.Response[v1.AllocResponse], error)
}

// NewIPAMServiceClient constructs a client for the wgcni.ipam.v1.IPAMService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIPAMServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) IPAMServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &iPAMServiceClient{
		alloc: connect_go.NewClient[v1.AllocRequest, v1.AllocResponse](
			httpClient,
			baseURL+"/wgcni.ipam.v1.IPAMService/Alloc",
			opts...,
		),
	}
}

// iPAMServiceClient implements IPAMServiceClient.
type iPAMServiceClient struct {
	alloc *connect_go.Client[v1.AllocRequest, v1.AllocResponse]
}

// Alloc calls wgcni.ipam.v1.IPAMService.Alloc.
func (c *iPAMServiceClient) Alloc(ctx context.Context, req *connect_go.Request[v1.AllocRequest]) (*connect_go.Response[v1.AllocResponse], error) {
	return c.alloc.CallUnary(ctx, req)
}

// IPAMServiceHandler is an implementation of the wgcni.ipam.v1.IPAMService service.
type IPAMServiceHandler interface {
	Alloc(context.Context, *connect_go.Request[v1.AllocRequest]) (*connect_go.Response[v1.AllocResponse], error)
}

// NewIPAMServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIPAMServiceHandler(svc IPAMServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/wgcni.ipam.v1.IPAMService/Alloc", connect_go.NewUnaryHandler(
		"/wgcni.ipam.v1.IPAMService/Alloc",
		svc.Alloc,
		opts...,
	))
	return "/wgcni.ipam.v1.IPAMService/", mux
}

// UnimplementedIPAMServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIPAMServiceHandler struct{}

func (UnimplementedIPAMServiceHandler) Alloc(context.Context, *connect_go.Request[v1.AllocRequest]) (*connect_go.Response[v1.AllocResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wgcni.ipam.v1.IPAMService.Alloc is not implemented"))
}
